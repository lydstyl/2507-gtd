#!/bin/bash

# Script de test pour l'application build√©e
# Usage: ./test-built-app.sh [PORT]

set -e

TEST_PORT=${1:-3001}
echo "üß™ Test de l'application sur le port: $TEST_PORT"

# Couleurs pour les messages
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

error() {
    echo -e "${RED}[$(date +'%Y-%m-%d %H:%M:%S')] ERROR: $1${NC}"
}

info() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')] INFO: $1${NC}"
}

warn() {
    echo -e "${YELLOW}[$(date +'%Y-%m-%d %H:%M:%S')] WARNING: $1${NC}"
}

# V√©rifier que les serveurs sont en cours d'ex√©cution
check_servers() {
    log "üîç V√©rification du serveur unifi√©..."
    
    # V√©rifier le serveur unifi√©
    if curl -f http://localhost:$TEST_PORT/health > /dev/null 2>&1; then
        log "‚úÖ Serveur unifi√© accessible sur http://localhost:$TEST_PORT"
    else
        error "‚ùå Serveur unifi√© non accessible sur http://localhost:$TEST_PORT"
        return 1
    fi
    
    # V√©rifier que le frontend est accessible via le serveur unifi√©
    if curl -f http://localhost:$TEST_PORT > /dev/null 2>&1; then
        log "‚úÖ Frontend accessible via le serveur unifi√©"
    else
        error "‚ùå Frontend non accessible via le serveur unifi√©"
        return 1
    fi
}

# Tester l'API
test_api() {
    log "üß™ Test de l'API..."
    
    # Test de l'endpoint de sant√©
    info "Test de l'endpoint /health..."
    HEALTH_RESPONSE=$(curl -s http://localhost:$TEST_PORT/health)
    if echo "$HEALTH_RESPONSE" | grep -q "OK"; then
        log "‚úÖ Endpoint /health fonctionne"
    else
        error "‚ùå Endpoint /health ne fonctionne pas"
        echo "R√©ponse: $HEALTH_RESPONSE"
    fi
    
    # Test de l'endpoint API racine
    info "Test de l'endpoint /api..."
    API_RESPONSE=$(curl -s http://localhost:$TEST_PORT/api)
    if echo "$API_RESPONSE" | grep -q "Todo List API"; then
        log "‚úÖ Endpoint /api fonctionne"
    else
        error "‚ùå Endpoint /api ne fonctionne pas"
        echo "R√©ponse: $API_RESPONSE"
    fi
    
    # Test de l'endpoint des t√¢ches
    info "Test de l'endpoint /api/tasks..."
    TASKS_RESPONSE=$(curl -s http://localhost:$TEST_PORT/api/tasks)
    if [ $? -eq 0 ]; then
        log "‚úÖ Endpoint /api/tasks accessible"
        echo "Nombre de t√¢ches: $(echo "$TASKS_RESPONSE" | jq '.length // 0' 2>/dev/null || echo "N/A")"
    else
        warn "‚ö†Ô∏è  Endpoint /api/tasks retourne une erreur (peut √™tre normal si pas de donn√©es)"
    fi
    
    # Test de l'endpoint des tags
    info "Test de l'endpoint /api/tags..."
    TAGS_RESPONSE=$(curl -s http://localhost:$TEST_PORT/api/tags)
    if [ $? -eq 0 ]; then
        log "‚úÖ Endpoint /api/tags accessible"
        echo "Nombre de tags: $(echo "$TAGS_RESPONSE" | jq '.length // 0' 2>/dev/null || echo "N/A")"
    else
        warn "‚ö†Ô∏è  Endpoint /api/tags retourne une erreur (peut √™tre normal si pas de donn√©es)"
    fi
}

# Tester le frontend
test_frontend() {
    log "üåê Test du frontend..."
    
    # V√©rifier que le fichier index.html existe
    if curl -s http://localhost:$TEST_PORT | grep -q "html"; then
        log "‚úÖ Page d'accueil du frontend accessible"
    else
        error "‚ùå Page d'accueil du frontend non accessible"
    fi
    
    # V√©rifier les assets statiques
    if curl -s -I http://localhost:$TEST_PORT/assets/ | grep -q "200\|404"; then
        log "‚úÖ Assets statiques accessibles"
    else
        warn "‚ö†Ô∏è  Probl√®me avec les assets statiques"
    fi
}

# Test de performance basique
test_performance() {
    log "‚ö° Test de performance basique..."
    
    # Test de temps de r√©ponse du backend
    info "Test de temps de r√©ponse du backend..."
    BACKEND_TIME=$(curl -s -w "%{time_total}" -o /dev/null http://localhost:$TEST_PORT/health)
    log "‚úÖ Temps de r√©ponse backend: ${BACKEND_TIME}s"
    
    # Test de temps de r√©ponse du frontend
    info "Test de temps de r√©ponse du frontend..."
    FRONTEND_TIME=$(curl -s -w "%{time_total}" -o /dev/null http://localhost:$TEST_PORT)
    log "‚úÖ Temps de r√©ponse frontend: ${FRONTEND_TIME}s"
}

# Fonction principale
main() {
    log "üöÄ D√©marrage des tests de l'application build√©e..."
    
    # V√©rifier que les serveurs sont en cours d'ex√©cution
    if ! check_servers; then
        error "Le serveur unifi√© n'est pas en cours d'ex√©cution. Lancez d'abord: ./deploy.sh test-local"
        exit 1
    fi
    
    echo ""
    
    # Tester l'API
    test_api
    
    echo ""
    
    # Tester le frontend
    test_frontend
    
    echo ""
    
    # Test de performance
    test_performance
    
    echo ""
    log "üéâ Tous les tests sont termin√©s!"
    log "üìä R√©sum√©:"
    echo "   - Serveur unifi√©: http://localhost:$TEST_PORT"
    echo "   - Frontend: http://localhost:$TEST_PORT"
    echo "   - API Documentation: http://localhost:$TEST_PORT"
    echo ""
    info "üí° Pour tester manuellement:"
    echo "   - Ouvrez http://localhost:$TEST_PORT dans votre navigateur"
    echo "   - Testez les fonctionnalit√©s de l'application"
    echo "   - V√©rifiez que tout fonctionne comme attendu"
}

# Ex√©cuter le script principal
main 