import { PrismaClient } from '@prisma/client'
import { PrismaTaskRepository } from '../src/infrastructure/repositories/PrismaTaskRepository'

const prisma = new PrismaClient()
const taskRepository = new PrismaTaskRepository(prisma)

describe('Task Sorting Tests', () => {
  const userId = 'test-user-sorting'
  const userEmail = 'test-sorting@example.com'

  beforeAll(async () => {
    // Cr√©er l'utilisateur de test
    await prisma.user.upsert({
      where: { id: userId },
      update: {},
      create: {
        id: userId,
        email: userEmail,
        password: 'test-password',
      },
    })
    // Nettoyer les t√¢ches de test
    await prisma.task.deleteMany({
      where: { userId }
    })
  })

  afterAll(async () => {
    await prisma.task.deleteMany({
      where: { userId }
    })
    await prisma.user.delete({ where: { id: userId } })
    await prisma.$disconnect()
  })

  test('should sort tasks according to specified criteria', async () => {
    // Cr√©er des t√¢ches de test avec diff√©rentes caract√©ristiques
    const testTasks = [
      // 1. T√¢ches rapides (sans importance/urgence/priorit√© d√©finies)
      { name: 'T√¢che rapide 1', importance: 5, urgency: 5, priority: 5, dueDate: null },
      { name: 'T√¢che rapide 2', importance: 5, urgency: 5, priority: 5, dueDate: null },
      
      // 2. T√¢ches pour aujourd'hui
      { name: 'T√¢che aujourd\'hui - Urgente', importance: 3, urgency: 1, priority: 2, dueDate: new Date() },
      { name: 'T√¢che aujourd\'hui - Importante', importance: 1, urgency: 3, priority: 2, dueDate: new Date() },
      { name: 'T√¢che aujourd\'hui - Priorit√©', importance: 3, urgency: 3, priority: 1, dueDate: new Date() },
      
      // 3. T√¢ches pour demain
      { name: 'T√¢che demain - Urgente', importance: 4, urgency: 1, priority: 3, dueDate: new Date(Date.now() + 24 * 60 * 60 * 1000) },
      { name: 'T√¢che demain - Importante', importance: 1, urgency: 4, priority: 3, dueDate: new Date(Date.now() + 24 * 60 * 60 * 1000) },
      
      // 4. T√¢ches normales (tri√©es par importance, urgence, priorit√©)
      { name: 'T√¢che normale - Moyenne', importance: 5, urgency: 5, priority: 5 },
      { name: 'T√¢che normale - Faible', importance: 8, urgency: 7, priority: 6 },
      { name: 'T√¢che normale - Tr√®s importante', importance: 1, urgency: 5, priority: 4 },
      { name: 'T√¢che normale - Importante', importance: 2, urgency: 4, priority: 3 },
      
    ]

    // Cr√©er les t√¢ches principales
    const createdTasks: any[] = []
    for (const taskData of testTasks) {
      const task = await taskRepository.create({
        name: taskData.name,
        importance: taskData.importance,
        urgency: taskData.urgency,
        priority: taskData.priority,
        dueDate: taskData.dueDate || undefined,
        userId
      })
      createdTasks.push(task)
    }

    // Cr√©er des sous-t√¢ches pour certaines t√¢ches
    const parentTask = createdTasks[2] // T√¢che aujourd'hui - Urgente
    const subtasks = [
      { name: 'Sous-t√¢che - Importante', importance: 1, urgency: 3, priority: 2 },
      { name: 'Sous-t√¢che - Urgente', importance: 3, urgency: 1, priority: 2 },
      { name: 'Sous-t√¢che - Priorit√©', importance: 3, urgency: 3, priority: 1 },
    ]

    for (const subtaskData of subtasks) {
      await taskRepository.create({
        name: subtaskData.name,
        importance: subtaskData.importance,
        urgency: subtaskData.urgency,
        priority: subtaskData.priority,
        parentId: parentTask.id,
        userId
      })
    }

    // R√©cup√©rer toutes les t√¢ches
    const allTasks = await taskRepository.findAll({ userId })

    // V√©rifier le tri
    console.log('\nüìã T√¢ches tri√©es:')
    allTasks.forEach((task, index) => {
      console.log(`${index + 1}. ${task.name} (I:${task.importance}, U:${task.urgency}, P:${task.priority})`)
      if (task.subtasks.length > 0) {
        task.subtasks.forEach((subtask, subIndex) => {
          console.log(`   ${index + 1}.${subIndex + 1}. ${subtask.name} (I:${subtask.importance}, U:${subtask.urgency}, P:${subtask.priority})`)
        })
      }
    })

    // V√©rifications sp√©cifiques
    expect(allTasks.length).toBeGreaterThan(0)

    // V√©rifier que les t√¢ches rapides sont en premier
    const firstTask = allTasks[0]
    expect(firstTask.importance).toBe(5)
    expect(firstTask.urgency).toBe(5)
    expect(firstTask.priority).toBe(5)

    // V√©rifier que les t√¢ches d'aujourd'hui sont group√©es
    const todayTasks = allTasks.filter(task => 
      task.dueDate && 
      new Date(task.dueDate).toDateString() === new Date().toDateString()
    )
    expect(todayTasks.length).toBeGreaterThan(0)

    // V√©rifier que les t√¢ches de demain sont group√©es
    const tomorrowTasks = allTasks.filter(task => 
      task.dueDate && 
      new Date(task.dueDate).toDateString() === new Date(Date.now() + 24 * 60 * 60 * 1000).toDateString()
    )
    expect(tomorrowTasks.length).toBeGreaterThan(0)

    // V√©rifier que les sous-t√¢ches sont tri√©es
    const taskWithSubtasks = allTasks.find(task => task.subtasks.length > 0)
    if (taskWithSubtasks && taskWithSubtasks.subtasks.length > 0) {
      const subtasks = taskWithSubtasks.subtasks
      // V√©rifier que les sous-t√¢ches sont tri√©es par importance, urgence, priorit√©
      for (let i = 0; i < subtasks.length - 1; i++) {
        const current = subtasks[i]
        const next = subtasks[i + 1]
        
        // Si importance diff√©rente, v√©rifier l'ordre
        if (current.importance !== next.importance) {
          expect(current.importance).toBeLessThanOrEqual(next.importance)
        } else if (current.urgency !== next.urgency) {
          // Si importance √©gale, v√©rifier urgence
          expect(current.urgency).toBeLessThanOrEqual(next.urgency)
        } else {
          // Si importance et urgence √©gales, v√©rifier priorit√©
          expect(current.priority).toBeLessThanOrEqual(next.priority)
        }
      }
    }
  })
}) 