import { PrismaClient } from '@prisma/client'
import { AuthService } from '../src/services/authService'
import { PrismaUserRepository } from '../src/infrastructure/repositories/PrismaUserRepository'
import { PrismaTaskRepository } from '../src/infrastructure/repositories/PrismaTaskRepository'
import { PrismaTagRepository } from '../src/infrastructure/repositories/PrismaTagRepository'

const prisma = new PrismaClient()
const userRepository = new PrismaUserRepository(prisma)
const authService = new AuthService(userRepository)
const taskRepository = new PrismaTaskRepository(prisma)
const tagRepository = new PrismaTagRepository(prisma)

describe('Full User Flow Tests', () => {
  const testEmail = 'test-user-flow@example.com'
  const testPassword = 'test-password-123'
  let userId: string
  let authToken: string

  beforeAll(async () => {
    // Nettoyer les donn√©es de test existantes
    await prisma.task.deleteMany({
      where: { user: { email: testEmail } }
    })
    await prisma.tag.deleteMany({
      where: { user: { email: testEmail } }
    })
    await prisma.user.deleteMany({
      where: { email: testEmail }
    })
  })

  afterAll(async () => {
    // Nettoyer apr√®s les tests
    await prisma.task.deleteMany({
      where: { user: { email: testEmail } }
    })
    await prisma.tag.deleteMany({
      where: { user: { email: testEmail } }
    })
    await prisma.user.deleteMany({
      where: { email: testEmail }
    })
    await prisma.$disconnect()
  })

  test('should create user, authenticate, create task and retrieve it', async () => {
    console.log('\nüîÑ Test du flux utilisateur complet...')

    // 1. Cr√©er un utilisateur
    console.log('üìù 1. Cr√©ation de l\'utilisateur...')
    const user = await authService.register(testEmail, testPassword)
    userId = user.id
    console.log('‚úÖ Utilisateur cr√©√©:', { id: user.id, email: user.email })

    // V√©rifier que l'utilisateur existe dans la base
    const createdUser = await userRepository.findByEmail(testEmail)
    expect(createdUser).toBeDefined()
    expect(createdUser!.id).toBe(userId)
    expect(createdUser!.email).toBe(testEmail)

    // 2. Authentifier l'utilisateur
    console.log('üîê 2. Authentification...')
    const authResult = await authService.login(testEmail, testPassword)
    authToken = authResult.token
    console.log('‚úÖ Authentification r√©ussie, token obtenu')

    // V√©rifier que le token contient les bonnes informations
    const jwt = require('jsonwebtoken')
    const decodedToken = jwt.verify(authToken, process.env.JWT_SECRET || 'dev-secret')
    expect(decodedToken.userId).toBe(userId)
    expect(decodedToken.email).toBe(testEmail)

    // 3. Cr√©er une t√¢che
    console.log('üìã 3. Cr√©ation d\'une t√¢che...')
    const taskData = {
      name: 'T√¢che de test du flux complet',
      importance: 1,
      urgency: 2,
      priority: 3,
      link: 'https://example.com',
      userId: userId
    }

    const createdTask = await taskRepository.create(taskData)
    console.log('‚úÖ T√¢che cr√©√©e:', { id: createdTask.id, name: createdTask.name })

    // V√©rifier que la t√¢che a √©t√© cr√©√©e correctement
    expect(createdTask).toBeDefined()
    expect(createdTask.name).toBe(taskData.name)
    expect(createdTask.importance).toBe(taskData.importance)
    expect(createdTask.urgency).toBe(taskData.urgency)
    expect(createdTask.priority).toBe(taskData.priority)
    expect(createdTask.userId).toBe(userId)
    expect(createdTask.link).toBe(taskData.link)

    // 4. R√©cup√©rer les t√¢ches de l'utilisateur
    console.log('üîç 4. R√©cup√©ration des t√¢ches...')
    const userTasks = await taskRepository.findAll({ userId })
    console.log('‚úÖ T√¢ches r√©cup√©r√©es:', userTasks.length)

    // V√©rifier que la t√¢che est bien r√©cup√©r√©e
    expect(userTasks).toHaveLength(1)
    expect(userTasks[0].id).toBe(createdTask.id)
    expect(userTasks[0].name).toBe(taskData.name)
    expect(userTasks[0].userId).toBe(userId)

    // 5. Cr√©er un tag
    console.log('üè∑Ô∏è 5. Cr√©ation d\'un tag...')
    const tagData = {
      name: 'Tag de test',
      color: '#ff0000',
      userId: userId
    }

    const createdTag = await tagRepository.create(tagData)
    console.log('‚úÖ Tag cr√©√©:', { id: createdTag.id, name: createdTag.name })

    // V√©rifier que le tag a √©t√© cr√©√© correctement
    expect(createdTag).toBeDefined()
    expect(createdTag.name).toBe(tagData.name)
    expect(createdTag.color).toBe(tagData.color)
    expect(createdTag.userId).toBe(userId)

    // 6. Cr√©er une t√¢che avec le tag
    console.log('üìã 6. Cr√©ation d\'une t√¢che avec tag...')
    const taskWithTagData = {
      name: 'T√¢che avec tag',
      importance: 2,
      urgency: 1,
      priority: 2,
      userId: userId,
      tagIds: [createdTag.id]
    }

    const taskWithTag = await taskRepository.create(taskWithTagData)
    console.log('‚úÖ T√¢che avec tag cr√©√©e:', { id: taskWithTag.id, name: taskWithTag.name })

    // V√©rifier que la t√¢che a le bon tag
    expect(taskWithTag.tags).toHaveLength(1)
    expect(taskWithTag.tags[0].id).toBe(createdTag.id)
    expect(taskWithTag.tags[0].name).toBe(createdTag.name)

    // 7. R√©cup√©rer toutes les t√¢ches de l'utilisateur
    console.log('üîç 7. R√©cup√©ration de toutes les t√¢ches...')
    const allUserTasks = await taskRepository.findAll({ userId })
    console.log('‚úÖ Toutes les t√¢ches r√©cup√©r√©es:', allUserTasks.length)

    // V√©rifier qu'on a bien 2 t√¢ches
    expect(allUserTasks).toHaveLength(2)
    
    // V√©rifier que les t√¢ches appartiennent bien √† l'utilisateur
    allUserTasks.forEach(task => {
      expect(task.userId).toBe(userId)
    })

    // 8. R√©cup√©rer les tags de l'utilisateur
    console.log('üè∑Ô∏è 8. R√©cup√©ration des tags...')
    const userTags = await tagRepository.findAll(userId)
    console.log('‚úÖ Tags r√©cup√©r√©s:', userTags.length)

    // V√©rifier qu'on a bien 1 tag
    expect(userTags).toHaveLength(1)
    expect(userTags[0].id).toBe(createdTag.id)
    expect(userTags[0].name).toBe(createdTag.name)
    expect(userTags[0].userId).toBe(userId)

    console.log('\nüéâ Test du flux utilisateur complet r√©ussi !')
  })

  test('should verify user isolation - another user cannot see first user data', async () => {
    console.log('\nüîÑ Test d\'isolation des utilisateurs...')

    // Cr√©er un deuxi√®me utilisateur
    const secondUserEmail = 'test-user-2@example.com'
    const secondUserPassword = 'test-password-456'

    console.log('üìù Cr√©ation du deuxi√®me utilisateur...')
    const secondUser = await authService.register(secondUserEmail, secondUserPassword)
    console.log('‚úÖ Deuxi√®me utilisateur cr√©√©:', { id: secondUser.id, email: secondUser.email })

    // Cr√©er une t√¢che pour le deuxi√®me utilisateur
    console.log('üìã Cr√©ation d\'une t√¢che pour le deuxi√®me utilisateur...')
    const secondUserTask = await taskRepository.create({
      name: 'T√¢che du deuxi√®me utilisateur',
      importance: 3,
      urgency: 4,
      priority: 5,
      userId: secondUser.id
    })
    console.log('‚úÖ T√¢che du deuxi√®me utilisateur cr√©√©e')

    // V√©rifier que le premier utilisateur ne voit que ses propres t√¢ches
    console.log('üîç V√©rification de l\'isolation...')
    const firstUserTasks = await taskRepository.findAll({ userId })
    const secondUserTasks = await taskRepository.findAll({ userId: secondUser.id })

    console.log('üìä R√©sultats:')
    console.log(`- Premier utilisateur: ${firstUserTasks.length} t√¢ches`)
    console.log(`- Deuxi√®me utilisateur: ${secondUserTasks.length} t√¢ches`)

    // V√©rifications
    expect(firstUserTasks.length).toBeGreaterThan(0)
    expect(secondUserTasks.length).toBeGreaterThan(0)

    // V√©rifier qu'il n'y a pas de m√©lange
    const firstUserTaskIds = firstUserTasks.map(t => t.id)
    const secondUserTaskIds = secondUserTasks.map(t => t.id)

    firstUserTaskIds.forEach(taskId => {
      expect(secondUserTaskIds).not.toContain(taskId)
    })

    secondUserTaskIds.forEach(taskId => {
      expect(firstUserTaskIds).not.toContain(taskId)
    })

    // V√©rifier que chaque utilisateur ne voit que ses t√¢ches
    firstUserTasks.forEach(task => {
      expect(task.userId).toBe(userId)
    })

    secondUserTasks.forEach(task => {
      expect(task.userId).toBe(secondUser.id)
    })

    console.log('‚úÖ Isolation des utilisateurs v√©rifi√©e !')

    // Nettoyer le deuxi√®me utilisateur
    await prisma.task.deleteMany({
      where: { userId: secondUser.id }
    })
    await prisma.user.delete({
      where: { id: secondUser.id }
    })
  })
}) 