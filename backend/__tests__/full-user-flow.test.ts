import { PrismaClient } from '@prisma/client'
import { AuthService } from '../src/services/authService'
import { PrismaUserRepository } from '../src/infrastructure/repositories/PrismaUserRepository'
import { PrismaTaskRepository } from '../src/infrastructure/repositories/PrismaTaskRepository'
import { PrismaTagRepository } from '../src/infrastructure/repositories/PrismaTagRepository'

const prisma = new PrismaClient()
const userRepository = new PrismaUserRepository(prisma)
const authService = new AuthService(userRepository)
const taskRepository = new PrismaTaskRepository(prisma)
const tagRepository = new PrismaTagRepository(prisma)

describe('Full User Flow Tests', () => {
  const testEmail = 'test-user-flow@example.com'
  const testPassword = 'test-password-123'
  let userId: string
  let authToken: string

  beforeAll(async () => {
    // Nettoyer les donn√©es de test existantes
    await prisma.task.deleteMany({
      where: { user: { email: testEmail } }
    })
    await prisma.tag.deleteMany({
      where: { user: { email: testEmail } }
    })
    await prisma.user.deleteMany({
      where: { email: testEmail }
    })
  }, 15000)

  afterAll(async () => {
    // Nettoyer apr√®s les tests
    await prisma.task.deleteMany({
      where: { user: { email: testEmail } }
    })
    await prisma.tag.deleteMany({
      where: { user: { email: testEmail } }
    })
    await prisma.user.deleteMany({
      where: { email: testEmail }
    })
    await prisma.$disconnect()
  }, 15000)

  test('should create user, authenticate, create task and retrieve it', async () => {
    console.log('\nüîÑ Test du flux utilisateur complet...')

    // 1. Cr√©er un utilisateur
    const userEmail = `test-user-${Date.now()}@example.com`
    const userPassword = 'test-password-123'

    console.log("üìù 1. Cr√©ation de l'utilisateur...")
    const user = await authService.register(userEmail, userPassword)
    console.log('‚úÖ Utilisateur cr√©√©:', user.id)

    // 2. Authentifier l'utilisateur
    console.log('üîê 2. Authentification...')
    const authResult = await authService.login(userEmail, userPassword)
    console.log('‚úÖ Authentification r√©ussie')

    // 3. Cr√©er une t√¢che
    console.log("üìã 3. Cr√©ation d'une t√¢che...")
    const task = await taskRepository.create({
      name: 'T√¢che de test',
      importance: 30,
      complexity: 2,
      userId: user.id
    })
    console.log('‚úÖ T√¢che cr√©√©e:', task.id)

    // 4. R√©cup√©rer la t√¢che
    console.log('üîç 4. R√©cup√©ration de la t√¢che...')
    const retrievedTask = await taskRepository.findById(task.id)
    if (!retrievedTask) {
      throw new Error('Task not found')
    }
    console.log('‚úÖ T√¢che r√©cup√©r√©e:', retrievedTask.name)

    // V√©rifications
    expect(retrievedTask).toBeDefined()
    expect(retrievedTask.name).toBe('T√¢che de test')
    expect(retrievedTask.userId).toBe(user.id)

    console.log('‚úÖ Test du flux utilisateur complet r√©ussi !')
  }, 15000)

  test('should verify user isolation - another user cannot see first user data', async () => {
    console.log("\nüîÑ Test d'isolation des utilisateurs...")

    // Cr√©er un premier utilisateur pour ce test
    const firstUserEmail = `test-user-1-${Date.now()}@example.com`
    const firstUserPassword = 'test-password-123'

    console.log('üìù Cr√©ation du premier utilisateur...')
    const firstUser = await authService.register(
      firstUserEmail,
      firstUserPassword
    )
    console.log('‚úÖ Premier utilisateur cr√©√©:', firstUser.id)

    // Cr√©er une t√¢che pour le premier utilisateur
    console.log("üìã Cr√©ation d'une t√¢che pour le premier utilisateur...")
    const firstUserTask = await taskRepository.create({
      name: 'T√¢che du premier utilisateur',
      importance: 25,
      complexity: 3,
      userId: firstUser.id
    })
    console.log('‚úÖ T√¢che du premier utilisateur cr√©√©e')

    // Cr√©er un deuxi√®me utilisateur avec un email unique
    const secondUserEmail = `test-user-2-${Date.now()}@example.com`
    const secondUserPassword = 'test-password-456'

    console.log('üìù Cr√©ation du deuxi√®me utilisateur...')
    const secondUser = await authService.register(
      secondUserEmail,
      secondUserPassword
    )
    console.log('‚úÖ Deuxi√®me utilisateur cr√©√©:', {
      id: secondUser.id,
      email: secondUser.email
    })

    // Cr√©er une t√¢che pour le deuxi√®me utilisateur
    console.log("üìã Cr√©ation d'une t√¢che pour le deuxi√®me utilisateur...")
    const secondUserTask = await taskRepository.create({
      name: 'T√¢che du deuxi√®me utilisateur',
      importance: 35,
      complexity: 4,
      userId: secondUser.id
    })
    console.log('‚úÖ T√¢che du deuxi√®me utilisateur cr√©√©e')

    // V√©rifier que chaque utilisateur ne voit que ses propres t√¢ches
    console.log("üîç V√©rification de l'isolation...")
    const firstUserTasks = await taskRepository.findAll({
      userId: firstUser.id
    })
    const secondUserTasks = await taskRepository.findAll({
      userId: secondUser.id
    })

    console.log('üìä R√©sultats:')
    console.log(`- Premier utilisateur: ${firstUserTasks.length} t√¢ches`)
    console.log(`- Deuxi√®me utilisateur: ${secondUserTasks.length} t√¢ches`)

    // V√©rifications
    expect(firstUserTasks.length).toBeGreaterThan(0)
    expect(secondUserTasks.length).toBeGreaterThan(0)

    // V√©rifier qu'il n'y a pas de m√©lange
    const firstUserTaskIds = firstUserTasks.map((t) => t.id)
    const secondUserTaskIds = secondUserTasks.map((t) => t.id)

    firstUserTaskIds.forEach((taskId) => {
      expect(secondUserTaskIds).not.toContain(taskId)
    })

    secondUserTaskIds.forEach((taskId) => {
      expect(firstUserTaskIds).not.toContain(taskId)
    })

    // V√©rifier que chaque utilisateur ne voit que ses t√¢ches
    firstUserTasks.forEach((task) => {
      expect(task.userId).toBe(firstUser.id)
    })

    secondUserTasks.forEach((task) => {
      expect(task.userId).toBe(secondUser.id)
    })

    console.log('‚úÖ Isolation des utilisateurs v√©rifi√©e !')

    // Nettoyer les utilisateurs de test
    await prisma.task.deleteMany({
      where: { userId: { in: [firstUser.id, secondUser.id] } }
    })
    await prisma.user.deleteMany({
      where: { id: { in: [firstUser.id, secondUser.id] } }
    })
  }, 15000)
})
