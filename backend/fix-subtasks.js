const { PrismaClient } = require('@prisma/client')

const prisma = new PrismaClient()

async function fixSubtasks() {
  try {
    console.log('üîç V√©rification des t√¢ches...')
    
    // R√©cup√©rer toutes les t√¢ches
    const allTasks = await prisma.task.findMany({
      where: { userId: 'user-id' },
      orderBy: { createdAt: 'asc' }
    })
    
    console.log('üìã T√¢ches trouv√©es:')
    allTasks.forEach(task => {
      console.log(`- ${task.name} (ID: ${task.id}, ParentID: ${task.parentId || 'null'})`)
    })
    
    // Trouver la t√¢che "tache 2"
    const tache2 = allTasks.find(task => task.name === 'tache 2')
    const sousTache1 = allTasks.find(task => task.name === 'sous tache 1 de tache 2 ')
    const sousTache2 = allTasks.find(task => task.name === 'sous tache 2 de tache 2')
    
    if (tache2) {
      console.log('\nüîß Correction de la hi√©rarchie...')
      
      // Mettre √† jour la premi√®re sous-t√¢che
      if (sousTache1 && sousTache1.parentId !== tache2.id) {
        await prisma.task.update({
          where: { id: sousTache1.id },
          data: { parentId: tache2.id }
        })
        console.log(`‚úÖ Sous-t√¢che "${sousTache1.name}" li√©e √† "${tache2.name}"`)
      }
      
      // Mettre √† jour la deuxi√®me sous-t√¢che
      if (sousTache2 && sousTache2.parentId !== tache2.id) {
        await prisma.task.update({
          where: { id: sousTache2.id },
          data: { parentId: tache2.id }
        })
        console.log(`‚úÖ Sous-t√¢che "${sousTache2.name}" li√©e √† "${tache2.name}"`)
      }
    } else {
      console.log('‚ùå T√¢che parent "tache 2" non trouv√©e')
    }
    
    // V√©rifier le r√©sultat
    console.log('\nüìä R√©sultat apr√®s correction:')
    const updatedTasks = await prisma.task.findMany({
      where: { userId: 'user-id' },
      include: { subtasks: true },
      orderBy: { createdAt: 'asc' }
    })
    
    updatedTasks.forEach(task => {
      console.log(`- ${task.name} (ID: ${task.id}, ParentID: ${task.parentId || 'null'}, Sous-t√¢ches: ${task.subtasks.length})`)
    })
    
  } catch (error) {
    console.error('‚ùå Erreur:', error)
  } finally {
    await prisma.$disconnect()
  }
}

fixSubtasks() 