import { PrismaClient } from '@prisma/client'
import { PrismaUserRepository } from '../src/infrastructure/repositories/PrismaUserRepository'

const prisma = new PrismaClient()
const userRepository = new PrismaUserRepository(prisma)

async function verifyImport() {
  try {
    console.log('üîç V√©rification de l\'import...')
    
    // Trouver l'utilisateur
    const user = await userRepository.findByEmail('lydstyl@gmail.com')
    if (!user) {
      console.log('‚ùå Utilisateur lydstyl@gmail.com non trouv√©')
      return
    }
    
    console.log(`‚úÖ Utilisateur trouv√©: ${user.id}`)
    
    // R√©cup√©rer quelques t√¢ches avec leurs tags
    const tasks = await prisma.task.findMany({
      where: { userId: user.id },
      include: {
        tags: {
          include: {
            tag: true
          }
        }
      },
      take: 20,
      orderBy: { createdAt: 'desc' }
    })
    
    console.log(`\nüìä Aper√ßu de ${tasks.length} t√¢ches r√©cemment cr√©√©es:`)
    console.log('‚îÄ'.repeat(100))
    
    tasks.forEach((task, index) => {
      const tagNames = task.tags.map(tt => tt.tag.name).join(', ')
      console.log(`${index + 1}. "${task.name}"`)
      console.log(`   Importance: ${task.importance}, Urgence: ${task.urgency}, Priorit√©: ${task.priority}`)
      console.log(`   Tags: ${tagNames || 'Aucun'}`)
      console.log(`   Date: ${task.dueDate ? task.dueDate.toISOString().split('T')[0] : 'Aucune'}`)
      console.log('')
    })
    
    // Statistiques g√©n√©rales
    const totalTasks = await prisma.task.count({
      where: { userId: user.id }
    })
    
    const tasksWithImportance1 = await prisma.task.count({
      where: { 
        userId: user.id,
        importance: 1
      }
    })
    
    const tasksWithUrgency1 = await prisma.task.count({
      where: { 
        userId: user.id,
        urgency: 1
      }
    })
    
    console.log('üìà Statistiques:')
    console.log(`- Total des t√¢ches: ${totalTasks}`)
    console.log(`- T√¢ches avec importance = 1: ${tasksWithImportance1}`)
    console.log(`- T√¢ches avec urgence = 1: ${tasksWithUrgency1}`)
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification:', error)
  } finally {
    await prisma.$disconnect()
  }
}

if (require.main === module) {
  verifyImport()
} 